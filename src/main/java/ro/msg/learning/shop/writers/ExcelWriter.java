package ro.msg.learning.shop.writers;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Component;
import ro.msg.learning.shop.wrappers.QuantityTotalRevenueWrapper;

import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Map;


/**
 * Class that creates a report of all the purchased products from that month in a XLSX format
 */
@RequiredArgsConstructor
@Component
@Slf4j
public class ExcelWriter {


    /*
    productQuantityTotalRevenueForEachProductSoldMappedByDate= map1<Date,(map2<Product,QuantityTotalRevenueWrapper)>>

         map2: is a map in which the key is the product and the value is a QuantityTotalRevenueWrapper
               that contains how much of that product was sold and what was the generated revenue
         map1: is a map in which the key is a date and the value is a map containing every product sold in that date,
               the quantity sold, and the total revenue generated by that product in that date
                */
    public void writeExcel(Map<LocalDateTime, Map<Integer, QuantityTotalRevenueWrapper>> productQuantityTotalRevenueForEachProductSoldMappedByDate) {

        final val month = LocalDateTime.now().minusMonths(1).getMonth();
        final String FILE_NAME = "C:/Temp/" + month + "_report.xlsx";

        try (XSSFWorkbook workbook = new XSSFWorkbook()) {
            XSSFSheet sheet = workbook.createSheet("Month report day by day");

            val localDateTimes = productQuantityTotalRevenueForEachProductSoldMappedByDate.keySet();


            createTableHeader(sheet, "Date", "Product Id", "Quantity", "Total RevenueRepository");

            int rowNum = 1;
            for (LocalDateTime localDateTime : localDateTimes) {

                val s = localDateTime.toString().split("T");

                String dayOfMonth = s[0] + " " + s[1];

                final val integerQuantityTotalRevenueWrapperMap = productQuantityTotalRevenueForEachProductSoldMappedByDate.get(localDateTime);
                val productIds = integerQuantityTotalRevenueWrapperMap.keySet();


                for (Integer productId : productIds) {

                    ArrayList<Object> values = new ArrayList<>();
                    final val quantityTotalRevenueWrapper = integerQuantityTotalRevenueWrapperMap.get(productId);

                    values.add(dayOfMonth);
                    values.add(productId);
                    values.add(quantityTotalRevenueWrapper.getQuantity());
                    values.add(quantityTotalRevenueWrapper.getTotalRevenue());

                    createTableRow(sheet, rowNum++, values.toArray());

                }
            }

            FileOutputStream outputStream = new FileOutputStream(FILE_NAME);
            workbook.write(outputStream);


        } catch (IOException e) {
            log.error("error creating excel for this month{}", e);
        }
    }

    private void createTableRow(XSSFSheet sheet, int rowNumber, Object... values) {
        Row row = sheet.createRow(rowNumber);
        int colNum = 0;
        Cell cell;
        for (Object value : values) {
            cell = row.createCell(colNum++);
            cell.setCellValue(String.valueOf(value));
        }

    }

    private void createTableHeader(XSSFSheet sheet, String... headers) {
        Row row = sheet.createRow(0);
        int colNum = 0;
        Cell cell;
        for (String header : headers) {
            cell = row.createCell(colNum++);
            cell.setCellValue(header);
        }

    }
}
